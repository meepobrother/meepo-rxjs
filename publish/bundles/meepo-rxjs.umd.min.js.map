{"version":3,"file":"meepo-rxjs.umd.min.js","sources":["../../../../../node_modules/src/util/root.ts","../../../../../node_modules/src/util/AnimationFrame.ts","../../../../../node_modules/src/util/applyMixins.ts","../../../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../../../node_modules/src/util/assign.ts","../../../../../node_modules/src/util/EmptyError.ts","../../../../../node_modules/src/util/errorObject.ts","../../../../../node_modules/src/util/FastMap.ts","../../../../../node_modules/src/util/identity.ts","../../../../../node_modules/src/util/Immediate.ts","../../../../../node_modules/src/util/isArray.ts","../../../../../node_modules/src/util/isArrayLike.ts","../../../../../node_modules/src/util/isDate.ts","../../../../../node_modules/src/util/isFunction.ts","../../../../../node_modules/src/util/isNumeric.ts","../../../../../node_modules/src/util/isObject.ts","../../../../../node_modules/src/util/isPromise.ts","../../../../../node_modules/src/util/isScheduler.ts","../../../../../node_modules/src/util/MapPolyfill.ts","../../../../../node_modules/src/util/Map.ts","../../../../../node_modules/src/util/noop.ts","../../../../../node_modules/src/util/not.ts","../../../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../../../node_modules/src/util/pipe.ts","../../../../../node_modules/src/util/Set.ts","../../../../../node_modules/src/util/tryCatch.ts","../../../../../node_modules/src/util/UnsubscriptionError.ts","../../../../../node_modules/src/Subscription.ts","../../../../../node_modules/src/Observer.ts","../../../../../node_modules/src/symbol/rxSubscriber.ts","../../../../../node_modules/src/Subscriber.ts","../../../../../node_modules/src/util/toSubscriber.ts","../../../../../node_modules/src/symbol/observable.ts","../../../../../node_modules/src/Observable.ts","../../../../../node_modules/src/symbol/iterator.ts","../../../../../node_modules/src/InnerSubscriber.ts","../../../../../node_modules/src/util/subscribeToResult.ts","../../../../../node_modules/src/util/TimeoutError.ts","../../../../../node_modules/src/Notification.ts","../../../../../node_modules/src/OuterSubscriber.ts","../../../../../node_modules/src/operators/audit.ts","../../../../../node_modules/src/scheduler/Action.ts","../../../../../node_modules/src/scheduler/AsyncAction.ts","../../../../../node_modules/src/Scheduler.ts","../../../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../../../node_modules/src/scheduler/async.ts","../../../../../node_modules/src/observable/TimerObservable.ts","../../../../../node_modules/src/observable/timer.ts","../../../../../node_modules/src/operators/auditTime.ts","../../../../../node_modules/src/operators/buffer.ts","../../../../../node_modules/src/operators/bufferCount.ts","../../../../../node_modules/src/operators/bufferTime.ts","../../../../../node_modules/src/operators/bufferToggle.ts","../../../../../node_modules/src/operators/bufferWhen.ts","../../../../../node_modules/src/operators/catchError.ts","../../../../../node_modules/src/observable/ScalarObservable.ts","../../../../../node_modules/src/observable/EmptyObservable.ts","../../../../../node_modules/src/observable/ArrayObservable.ts","../../../../../node_modules/src/operators/combineLatest.ts","../../../../../node_modules/src/operators/combineAll.ts","../../../../../node_modules/src/observable/of.ts","../../../../../node_modules/src/observable/PromiseObservable.ts","../../../../../node_modules/src/observable/IteratorObservable.ts","../../../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../../../node_modules/src/operators/observeOn.ts","../../../../../node_modules/src/observable/FromObservable.ts","../../../../../node_modules/src/observable/from.ts","../../../../../node_modules/src/operators/mergeMap.ts","../../../../../node_modules/src/operators/mergeAll.ts","../../../../../node_modules/src/operators/concatAll.ts","../../../../../node_modules/src/observable/concat.ts","../../../../../node_modules/src/operators/concat.ts","../../../../../node_modules/src/operators/concatMap.ts","../../../../../node_modules/src/operators/concatMapTo.ts","../../../../../node_modules/src/operators/count.ts","../../../../../node_modules/src/operators/debounce.ts","../../../../../node_modules/src/operators/debounceTime.ts","../../../../../node_modules/src/operators/defaultIfEmpty.ts","../../../../../node_modules/src/operators/delay.ts","../../../../../node_modules/src/operators/delayWhen.ts","../../../../../node_modules/src/operators/dematerialize.ts","../../../../../node_modules/src/operators/distinct.ts","../../../../../node_modules/src/operators/distinctUntilChanged.ts","../../../../../node_modules/src/operators/distinctUntilKeyChanged.ts","../../../../../node_modules/src/operators/elementAt.ts","../../../../../node_modules/src/operators/every.ts","../../../../../node_modules/src/operators/exhaust.ts","../../../../../node_modules/src/operators/exhaustMap.ts","../../../../../node_modules/src/operators/expand.ts","../../../../../node_modules/src/operators/filter.ts","../../../../../node_modules/src/operators/finalize.ts","../../../../../node_modules/src/operators/find.ts","../../../../../node_modules/src/operators/findIndex.ts","../../../../../node_modules/src/operators/first.ts","../../../../../node_modules/src/SubjectSubscription.ts","../../../../../node_modules/src/Subject.ts","../../../../../node_modules/src/operators/groupBy.ts","../../../../../node_modules/src/operators/ignoreElements.ts","../../../../../node_modules/src/operators/isEmpty.ts","../../../../../node_modules/src/operators/last.ts","../../../../../node_modules/src/operators/map.ts","../../../../../node_modules/src/operators/mapTo.ts","../../../../../node_modules/src/operators/materialize.ts","../../../../../node_modules/src/operators/scan.ts","../../../../../node_modules/src/operators/takeLast.ts","../../../../../node_modules/src/operators/reduce.ts","../../../../../node_modules/src/operators/max.ts","../../../../../node_modules/src/observable/merge.ts","../../../../../node_modules/src/operators/merge.ts","../../../../../node_modules/src/operators/mergeMapTo.ts","../../../../../node_modules/src/operators/mergeScan.ts","../../../../../node_modules/src/operators/min.ts","../../../../../node_modules/src/operators/refCount.ts","../../../../../node_modules/src/observable/ConnectableObservable.ts","../../../../../node_modules/src/operators/multicast.ts","../../../../../node_modules/src/operators/onErrorResumeNext.ts","../../../../../node_modules/src/operators/pairwise.ts","../../../../../node_modules/src/operators/partition.ts","../../../../../node_modules/src/operators/pluck.ts","../../../../../node_modules/src/operators/publish.ts","../../../../../node_modules/src/BehaviorSubject.ts","../../../../../node_modules/src/operators/publishBehavior.ts","../../../../../node_modules/src/AsyncSubject.ts","../../../../../node_modules/src/operators/publishLast.ts","../../../../../node_modules/src/scheduler/QueueAction.ts","../../../../../node_modules/src/scheduler/QueueScheduler.ts","../../../../../node_modules/src/scheduler/queue.ts","../../../../../node_modules/src/ReplaySubject.ts","../../../../../node_modules/src/operators/publishReplay.ts","../../../../../node_modules/src/observable/race.ts","../../../../../node_modules/src/operators/race.ts","../../../../../node_modules/src/operators/repeat.ts","../../../../../node_modules/src/operators/repeatWhen.ts","../../../../../node_modules/src/operators/retry.ts","../../../../../node_modules/src/operators/retryWhen.ts","../../../../../node_modules/src/operators/sample.ts","../../../../../node_modules/src/operators/sampleTime.ts","../../../../../node_modules/src/operators/sequenceEqual.ts","../../../../../node_modules/src/operators/share.ts","../../../../../node_modules/src/operators/shareReplay.ts","../../../../../node_modules/src/operators/single.ts","../../../../../node_modules/src/operators/skip.ts","../../../../../node_modules/src/operators/skipLast.ts","../../../../../node_modules/src/operators/skipUntil.ts","../../../../../node_modules/src/operators/skipWhile.ts","../../../../../node_modules/src/operators/startWith.ts","../../../../../node_modules/src/operators/switchMap.ts","../../../../../node_modules/src/operators/switchAll.ts","../../../../../node_modules/src/operators/switchMapTo.ts","../../../../../node_modules/src/operators/take.ts","../../../../../node_modules/src/operators/takeUntil.ts","../../../../../node_modules/src/operators/takeWhile.ts","../../../../../node_modules/src/operators/tap.ts","../../../../../node_modules/src/operators/throttle.ts","../../../../../node_modules/src/operators/throttleTime.ts","../../../../../node_modules/src/operators/timeInterval.ts","../../../../../node_modules/src/operators/timeout.ts","../../../../../node_modules/src/operators/timeoutWith.ts","../../../../../node_modules/src/operators/timestamp.ts","../../../../../node_modules/src/operators/toArray.ts","../../../../../node_modules/src/operators/window.ts","../../../../../node_modules/src/operators/windowCount.ts","../../../../../node_modules/src/operators/windowTime.ts","../../../../../node_modules/src/operators/windowToggle.ts","../../../../../node_modules/src/operators/windowWhen.ts","../../../../../node_modules/src/operators/withLatestFrom.ts","../../../../../node_modules/src/operators/zip.ts","../../../../../node_modules/src/operators/zipAll.ts","../../../../../node_modules/src/operators.ts","../../../../../node_modules/src/observable/BoundCallbackObservable.ts","../../../../../node_modules/src/observable/BoundNodeCallbackObservable.ts","../../../../../node_modules/src/observable/DeferObservable.ts","../../../../../node_modules/src/observable/ErrorObservable.ts","../../../../../node_modules/src/observable/ForkJoinObservable.ts","../../../../../node_modules/src/observable/FromEventObservable.ts","../../../../../node_modules/src/observable/FromEventPatternObservable.ts","../../../../../node_modules/src/observable/GenerateObservable.ts","../../../../../node_modules/src/observable/generate.ts","../../../../../node_modules/src/observable/IfObservable.ts","../../../../../node_modules/src/observable/IntervalObservable.ts","../../../../../node_modules/src/observable/NeverObservable.ts","../../../../../node_modules/src/observable/onErrorResumeNext.ts","../../../../../node_modules/src/observable/PairsObservable.ts","../../../../../node_modules/src/observable/RangeObservable.ts","../../../../../node_modules/src/scheduler/AsapAction.ts","../../../../../node_modules/src/scheduler/AsapScheduler.ts","../../../../../node_modules/src/scheduler/asap.ts","../../../../../node_modules/src/observable/SubscribeOnObservable.ts","../../../../../node_modules/src/observable/UsingObservable.ts","../../../../../node_modules/src/scheduler/AnimationFrameAction.ts","../../../../../node_modules/src/scheduler/AnimationFrameScheduler.ts","../../../../../node_modules/src/scheduler/animationFrame.ts","../../../../../node_modules/src/scheduler/VirtualTimeScheduler.ts"],"sourcesContent":["declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","export function identity<T>(x: T): T {\n  return x;\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","/* tslint:disable:no-empty */\nexport function noop() { }\n","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n"],"names":["__window","window","__self","self","WorkerGlobalScope","_root","global","root_1","Error","RequestAnimationFrameDefinition","root","requestAnimationFrame","this","cancelAnimationFrame","bind","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","cb","setTimeout","RequestAnimationFrameDefinition_1","AnimationFrame_1","applyMixins_2","derivedCtor","baseCtors","i","len","length","baseCtor","propertyKeys","Object","getOwnPropertyNames","prototype","j","len2","name_1","ArgumentOutOfRangeError_2","_super","ArgumentOutOfRangeError","err","call","name","stack","message","__extends","assignImpl","target","sources","_i","arguments","source","k","hasOwnProperty","assign_1","assign","EmptyError_2","EmptyError","errorObject_1","e","FastMap_2","FastMap","values","delete","key","set","value","get","forEach","thisArg","clear","identity_2","x","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","o","toString","process","Boolean","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","onmessage","partiallyApplied","handler","args","fn","result","apply","undefined","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","Math","random","onGlobalMessage","globalMessageHandler","event","data","indexOf","slice","addEventListener","task","_this","channel","port1","port2","doc","html","documentElement","script","onreadystatechange","removeChild","appendChild","ImmediateDefinition_1","Immediate_1","isArray_1","Array","isArray","isArrayLike_1","isDate_2","Date","isNaN","isFunction_2","isNumeric_2","val","parseFloat","isObject_2","isPromise_2","subscribe","then","isScheduler_2","schedule","MapPolyfill_2","MapPolyfill","size","_values","_keys","push","splice","Map","MapPolyfill_1","noop_2","not_2","pred","notPred","ObjectUnsubscribedError_2","ObjectUnsubscribedError","pipe_2","fns","pipeFromArray","input","reduce","prev","noop_1","noop","minimalSetImpl","MinimalSet","add","has","defineProperty","tryCatchTarget","minimalSetImpl_1","Set","tryCatcher","errorObject","tryCatch_2","UnsubscriptionError_2","UnsubscriptionError","errors","map","join","flattenUnsubscriptionErrors","errs","concat","UnsubscriptionError_1","Subscription$$1","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","empty","Subscription","hasErrors","index","remove","isFunction_1","isFunction","tryCatch_1","tryCatch","sub","isObject_1","isObject","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","parent","next","error","complete","Symbol","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","create","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","toSubscriber_2","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","Observable$$1","_isScalar","_subscribe","Observable","lift","operator","sink","toSubscriber_1","toSubscriber","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","symbolIteratorPonyfill","iterator","Set_1","Map_1","keys","$$iterator","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","subscribeToResult_2","outerSubscriber","InnerSubscriber_1","Observable_1","isArrayLike","isPromise_1","isPromise","iterator_1","item","done","obs","TypeError","msg","TimeoutError_2","TimeoutError","Notification_2","Notification","kind","hasValue","observe","observer","do","accept","toObservable","of","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","OuterSubscriber","innerValue","innerIndex","innerSub","audit_2","durationSelector","AuditOperator","AuditSubscriber","throttled","duration","innerSubscription","subscribeToResult_1","subscribeToResult","clearThrottle","OuterSubscriber_1","Action_2","Action","scheduler","work","state","delay","AsyncAction_2","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","AsyncScheduler_2","AsyncScheduler","active","scheduled","action","shift","Scheduler_1","async_1","AsyncScheduler_1","AsyncAction_1","TimerObservable_2","TimerObservable","dueTime","period","isNumeric_1","isNumeric","Number","isScheduler_1","isScheduler","async","isDate_1","isDate","initialDelay","dispatch","audit_1","audit","timer_1","timer","buffer_2","closingNotifier","BufferOperator","BufferSubscriber","buffer","bufferCount_2","bufferSize","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","count","bufferTime_2","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","arg","bufferToggle_2","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferWhen_2","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","catchError_2","selector","CatchOperator","caught","CatchSubscriber","err2","ScalarObservable_2","ScalarObservable","EmptyObservable_2","EmptyObservable","ArrayObservable_2","ArrayObservable","array","pop","ScalarObservable_1","EmptyObservable_1","none","combineLatest_2","observables","project","ArrayObservable_1","CombineLatestOperator","CombineLatestSubscriber","CombineLatestOperator_1","toRespond","unused","oldVal","_tryProject","combineLatest_1","PromiseObservable_2","PromiseObservable","promise","dispatchNext","dispatchError","IteratorObservable_2","IteratorObservable","obj","StringIterator","ArrayIterator","getIterator","hasError","return","str","idx","charAt","arr","isFinite","valueAsNumber","floor","abs","maxSafeInteger","toLength","pow","ArrayLikeObservable_2","ArrayLikeObservable","arrayLike","observeOn_2","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable_2","FromObservable","ish","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","FromObservable_1","mergeMap_2$1","resultSelector","concurrent","MergeMapOperator","MergeMapSubscriber","MergeMapOperator_1","hasCompleted","_tryNext","_innerSub","_notifyResultSelector","mergeMap_1","mergeMap","identity_1","identity","mergeAll_1","mergeAll","from_1","from","concatAll_1","concatAll","of_1","concat_1","innerObservable","concatMap_1","concatMap","count_2","predicate","CountOperator","CountSubscriber","_tryPredicate","debounce_2","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","debounceTime_2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","dispatchNext$1","defaultIfEmpty_2","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","delay_2","delayFor","DelayOperator","DelaySubscriber","queue","time","delay_1","max","_schedule","scheduleNotification","DelayMessage","delayWhen_2","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","dematerialize_2","DeMaterializeOperator","DeMaterializeSubscriber","distinct_2","keySelector","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","distinctUntilChanged_2","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","distinctUntilChanged_1","distinctUntilChanged","elementAt_2","ElementAtOperator","ArgumentOutOfRangeError_1","ElementAtSubscriber","every_2","EveryOperator","EverySubscriber","everyValueMatch","exhaust_2","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaustMap_2","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","expand_2","ExpandOperator","ExpandSubscriber","ExpandOperator_1","subscribeToProjection","filter_2","FilterOperator","FilterSubscriber","finalize_2","callback","FinallyOperator","FinallySubscriber","find_2","FindValueOperator","yieldIndex","FindValueSubscriber","FindValueOperator_1","find_1","first_2","FirstOperator","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","Subject$$1","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","SubjectSubscription_1","asObservable","Subject_2","groupBy_2","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","Subject_1","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","GroupedObservable_1","ignoreElements_2","IgnoreElementsOperator","IgnoreElementsSubscriber","isEmpty_2","IsEmptyOperator","IsEmptySubscriber","last_2","LastOperator","LastSubscriber","map_2","MapOperator","MapSubscriber","MapOperator_1","mapTo_2","MapToOperator","MapToSubscriber","materialize_2","MaterializeOperator","MaterializeSubscriber","scan_2","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","takeLast_2","TakeLastOperator","total","TakeLastSubscriber","ring","scan_1","scan","takeLast_1","takeLast","defaultIfEmpty_1","defaultIfEmpty","acc","comparer","reduce_1","last","merge_1","merge","mergeMapTo_2","MergeMapToOperator","MergeMapToSubscriber","MergeMapToOperator_1","mergeScan_2","MergeScanOperator","MergeScanSubscriber","MergeScanOperator_1","min","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","refCount_1","ConnectableObservable_2","connectableProto","connectableObservableDescriptor","writable","multicast_2","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","onErrorResumeNext_2","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic_1","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise_2","PairwiseOperator","PairwiseSubscriber","hasPrev","filter_1","filter","not_1","not","properties","map_1","props","currentProp","p","multicast_1","multicast","BehaviorSubject$$1","_value","BehaviorSubject","getValue","BehaviorSubject_1","AsyncSubject","hasNext","AsyncSubject_1","QueueAction_2","QueueAction","QueueScheduler_2","QueueScheduler","queue_1","QueueAction_1","ReplaySubject_2","ReplaySubject$$1","windowTime","_events","_bufferSize","_windowTime","ReplaySubject","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","selectorOrScheduler","ReplaySubject_1","race_2$2","RaceOperator","RaceSubscriber","RaceOperator_1","hasFirst","race_1","race","repeat_2","RepeatOperator","RepeatSubscriber","repeatWhen_2","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","retry_2","RetryOperator","RetrySubscriber","retryWhen_2","RetryWhenOperator","RetryWhenSubscriber","sample_2","SampleOperator","sampleSubscriber","SampleSubscriber","sampleTime_2","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sequenceEqual_2","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualOperator_1","_a","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","a","b","areEqual","nextB","SequenceEqualSubscriber_1","shareSubjectFactory","isComplete","single_2","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","skip_2","SkipOperator","SkipSubscriber","skipLast_2","SkipLastOperator","_skipCount","SkipLastSubscriber","_count","_ring","skipCount","currentIndex","oldValue","skipUntil_2","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipWhile_2","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","switchMap_2","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMap","switchMapTo_2","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","take_2","TakeOperator","TakeSubscriber","takeUntil_2","TakeUntilOperator","TakeUntilSubscriber","takeWhile_2","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","tap_2","DoOperator","DoSubscriber","safeSubscriber","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttleTime_2","throttle_1","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext$2","timeInterval_2","TimeIntervalOperator","TimeInterval","interval","TimeInterval_1","TimeIntervalSubscriber","lastTime","span","timeout_2","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeoutWith_2","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timestamp_2","Timestamp","timestamp","toArrayReducer","window_2","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","windowCount_2","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","window_1","windowTime_2","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","timeSpanState","windowToggle_2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowWhen_2","unsubscribeClosingNotification","closingNotification","withLatestFrom_2","WithLatestFromOperator","WithLatestFromSubscriber","found","zip_2","zipStatic","ZipOperator","zipStatic_1","ZipSubscriber","ZipOperator_1","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","ZipSubscriber_1","nextResult","zipAll_2","zip_1","auditTime","auditTime_1","buffer_1","bufferCount","bufferCount_1","bufferTime","bufferTime_1","bufferToggle","bufferToggle_1","bufferWhen","bufferWhen_1","catchError","catchError_1","combineAll","combineAll_1","combineLatest$2","combineLatest","concat$2","concatMapTo","concatMapTo_1","count_1","debounce","debounce_1","debounceTime","debounceTime_1","delayWhen","delayWhen_1","dematerialize","dematerialize_1","distinct","distinct_1","distinctUntilKeyChanged","distinctUntilKeyChanged_1","elementAt","elementAt_1","every","every_1","exhaust","exhaust_1","exhaustMap","exhaustMap_1","expand","expand_1","finalize","finalize_1","find","findIndex","findIndex_1","first","first_1","groupBy","groupBy_1","ignoreElements","ignoreElements_1","isEmpty_1","last_1","mapTo","mapTo_1","materialize","materialize_1","max_1","merge$2","flatMap","mergeMapTo","mergeMapTo_1","mergeScan","mergeScan_1","min_1","observeOn","onErrorResumeNext","onErrorResumeNext_1","pairwise","pairwise_1","partition","partition_1","pluck","pluck_1","publish","publish_1","publishBehavior","publishBehavior_1","publishLast","publishLast_1","publishReplay","publishReplay_1","repeat","repeat_1","repeatWhen","repeatWhen_1","retry","retry_1","retryWhen","retryWhen_1","sample","sample_1","sampleTime","sampleTime_1","sequenceEqual","sequenceEqual_1","share","share_1","shareReplay","shareReplay_1","single","single_1","skip","skip_1","skipLast","skipLast_1","skipUntil","skipUntil_1","skipWhile","skipWhile_1","startWith","startWith_1","switchAll","switchAll_1","switchMapTo","switchMapTo_1","take","take_1","takeUntil","takeUntil_1","takeWhile","takeWhile_1","tap","tap_1","throttleTime","throttleTime_1","timeInterval","timeInterval_1","timeout","timeout_1","timeoutWith","timeoutWith_1","timestamp_1","toArray","toArray_1","window$1","windowCount","windowCount_1","windowTime_1","windowToggle","windowToggle_1","windowWhen","windowWhen_1","withLatestFrom","withLatestFrom_1","BoundCallbackObservable_2","BoundCallbackObservable","callbackFunc","func","handlerFn","innerArgs","result_1","result_2","dispatchNext$3","dispatchError$1","BoundNodeCallbackObservable_2","BoundNodeCallbackObservable","dispatchNext$4","dispatchError$2","DeferObservable_2","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","ErrorObservable_2","ErrorObservable","ForkJoinObservable_2","ForkJoinObservable","ForkJoinSubscriber","haveValues","_hasValue","FromEventObservable_2","FromEventObservable","sourceObj","eventName","options","setupSubscription","removeEventListener","source_1","on","off","source_2","addListener","removeListener","source_3","FromEventPatternObservable_2","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","selfSelector","GenerateObservable_2","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","generate_1","IfObservable_2","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","IntervalObservable_2","IntervalObservable","NeverObservable_2","NeverObservable","onErrorResumeNext_2$1","onErrorResumeNextStatic","dispatch$1","PairsObservable_2","PairsObservable","RangeObservable_2","RangeObservable","start","AsapAction_2","AsapAction","Immediate","AsapScheduler_2","AsapScheduler","asap_1","AsapAction_1","SubscribeOnObservable_2","SubscribeOnObservable","delayTime","asap","UsingObservable_2","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","AnimationFrameAction_2","AnimationFrameAction","AnimationFrame","AnimationFrameScheduler_2","AnimationFrameScheduler","animationFrame_1","AnimationFrameAction_1","VirtualTimeScheduler_2","VirtualTimeScheduler","maxFrames","VirtualAction","frame","frameTimeFactor","sort","sortActions"],"mappings":"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"}
