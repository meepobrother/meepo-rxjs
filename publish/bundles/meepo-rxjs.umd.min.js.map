{"version":3,"file":"meepo-rxjs.umd.min.js","sources":["../../../../../node_modules/src/util/root.ts","../../../../../node_modules/src/util/isFunction.ts","../../../../../node_modules/src/util/isArray.ts","../../../../../node_modules/src/util/isObject.ts","../../../../../node_modules/src/util/tryCatch.ts","../../../../../node_modules/src/util/errorObject.ts","../../../../../node_modules/src/util/UnsubscriptionError.ts","../../../../../node_modules/src/Subscription.ts","../../../../../node_modules/src/Observer.ts","../../../../../node_modules/src/symbol/rxSubscriber.ts","../../../../../node_modules/src/Subscriber.ts","../../../../../node_modules/src/util/toSubscriber.ts","../../../../../node_modules/src/symbol/observable.ts","../../../../../node_modules/src/util/noop.ts","../../../../../node_modules/src/util/pipe.ts","../../../../../node_modules/src/Observable.ts","../../../../../node_modules/src/observable/ScalarObservable.ts","../../../../../node_modules/src/observable/EmptyObservable.ts","../../../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../../../node_modules/src/util/isScheduler.ts","../../../../../node_modules/src/observable/ArrayObservable.ts","../../../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../../../node_modules/src/SubjectSubscription.ts","../../../../../node_modules/src/Subject.ts","../../../../../node_modules/src/AsyncSubject.ts","../../../../../node_modules/src/observable/BoundCallbackObservable.ts","../../../../../node_modules/src/observable/BoundNodeCallbackObservable.ts","../../../../../node_modules/src/operators/refCount.ts","../../../../../node_modules/src/observable/ConnectableObservable.ts","../../../../../node_modules/src/util/isArrayLike.ts","../../../../../node_modules/src/util/isPromise.ts","../../../../../node_modules/src/symbol/iterator.ts","../../../../../node_modules/src/InnerSubscriber.ts","../../../../../node_modules/src/util/subscribeToResult.ts","../../../../../node_modules/src/OuterSubscriber.ts","../../../../../node_modules/src/observable/DeferObservable.ts","../../../../../node_modules/src/observable/ErrorObservable.ts","../../../../../node_modules/src/observable/ForkJoinObservable.ts","../../../../../node_modules/src/observable/FromEventObservable.ts","../../../../../node_modules/src/observable/FromEventPatternObservable.ts","../../../../../node_modules/src/observable/PromiseObservable.ts","../../../../../node_modules/src/observable/IteratorObservable.ts","../../../../../node_modules/src/Notification.ts","../../../../../node_modules/src/operators/observeOn.ts","../../../../../node_modules/src/observable/FromObservable.ts","../../../../../node_modules/src/observable/GenerateObservable.ts","../../../../../node_modules/src/observable/generate.ts","../../../../../node_modules/src/observable/IfObservable.ts","../../../../../node_modules/src/util/isNumeric.ts","../../../../../node_modules/src/scheduler/Action.ts","../../../../../node_modules/src/scheduler/AsyncAction.ts","../../../../../node_modules/src/Scheduler.ts","../../../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../../../node_modules/src/scheduler/async.ts","../../../../../node_modules/src/observable/IntervalObservable.ts","../../../../../node_modules/src/observable/NeverObservable.ts","../../../../../node_modules/src/operators/onErrorResumeNext.ts","../../../../../node_modules/src/observable/onErrorResumeNext.ts","../../../../../node_modules/src/observable/PairsObservable.ts","../../../../../node_modules/src/observable/race.ts","../../../../../node_modules/src/observable/RangeObservable.ts","../../../../../node_modules/src/util/Immediate.ts","../../../../../node_modules/src/scheduler/AsapAction.ts","../../../../../node_modules/src/scheduler/AsapScheduler.ts","../../../../../node_modules/src/scheduler/asap.ts","../../../../../node_modules/src/observable/SubscribeOnObservable.ts","../../../../../node_modules/src/util/isDate.ts","../../../../../node_modules/src/observable/TimerObservable.ts","../../../../../node_modules/src/observable/UsingObservable.ts","../../../../../node_modules/src/operators/zip.ts","../../../../../node_modules/src/operators/audit.ts","../../../../../node_modules/src/observable/timer.ts","../../../../../node_modules/src/operators/auditTime.ts","../../../../../node_modules/src/operators/buffer.ts","../../../../../node_modules/src/operators/bufferCount.ts","../../../../../node_modules/src/operators/bufferTime.ts","../../../../../node_modules/src/operators/bufferToggle.ts","../../../../../node_modules/src/operators/bufferWhen.ts","../../../../../node_modules/src/operators/catchError.ts","../../../../../node_modules/src/operators/combineLatest.ts","../../../../../node_modules/src/operators/combineAll.ts","../../../../../node_modules/src/observable/of.ts","../../../../../node_modules/src/observable/from.ts","../../../../../node_modules/src/operators/mergeMap.ts","../../../../../node_modules/src/util/identity.ts","../../../../../node_modules/src/operators/mergeAll.ts","../../../../../node_modules/src/operators/concatAll.ts","../../../../../node_modules/src/observable/concat.ts","../../../../../node_modules/src/operators/concat.ts","../../../../../node_modules/src/operators/concatMap.ts","../../../../../node_modules/src/operators/concatMapTo.ts","../../../../../node_modules/src/operators/count.ts","../../../../../node_modules/src/operators/debounce.ts","../../../../../node_modules/src/operators/debounceTime.ts","../../../../../node_modules/src/operators/distinctUntilChanged.ts","../../../../../node_modules/src/operators/distinctUntilKeyChanged.ts","../../../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../../../node_modules/src/operators/elementAt.ts","../../../../../node_modules/src/operators/every.ts","../../../../../node_modules/src/operators/exhaust.ts","../../../../../node_modules/src/operators/exhaustMap.ts","../../../../../node_modules/src/operators/defaultIfEmpty.ts","../../../../../node_modules/src/operators/delay.ts","../../../../../node_modules/src/operators/delayWhen.ts","../../../../../node_modules/src/operators/dematerialize.ts","../../../../../node_modules/src/util/Set.ts","../../../../../node_modules/src/operators/distinct.ts","../../../../../node_modules/src/operators/expand.ts","../../../../../node_modules/src/operators/filter.ts","../../../../../node_modules/src/operators/finalize.ts","../../../../../node_modules/src/operators/find.ts","../../../../../node_modules/src/operators/findIndex.ts","../../../../../node_modules/src/util/EmptyError.ts","../../../../../node_modules/src/operators/first.ts","../../../../../node_modules/src/util/MapPolyfill.ts","../../../../../node_modules/src/util/Map.ts","../../../../../node_modules/src/util/FastMap.ts","../../../../../node_modules/src/operators/groupBy.ts","../../../../../node_modules/src/operators/ignoreElements.ts","../../../../../node_modules/src/operators/isEmpty.ts","../../../../../node_modules/src/operators/last.ts","../../../../../node_modules/src/operators/map.ts","../../../../../node_modules/src/operators/mapTo.ts","../../../../../node_modules/src/operators/materialize.ts","../../../../../node_modules/src/operators/scan.ts","../../../../../node_modules/src/operators/takeLast.ts","../../../../../node_modules/src/operators/reduce.ts","../../../../../node_modules/src/operators/max.ts","../../../../../node_modules/src/observable/merge.ts","../../../../../node_modules/src/operators/merge.ts","../../../../../node_modules/src/operators/mergeMapTo.ts","../../../../../node_modules/src/operators/mergeScan.ts","../../../../../node_modules/src/operators/min.ts","../../../../../node_modules/src/operators/multicast.ts","../../../../../node_modules/src/operators/pairwise.ts","../../../../../node_modules/src/util/not.ts","../../../../../node_modules/src/operators/partition.ts","../../../../../node_modules/src/operators/pluck.ts","../../../../../node_modules/src/operators/publish.ts","../../../../../node_modules/src/BehaviorSubject.ts","../../../../../node_modules/src/operators/publishBehavior.ts","../../../../../node_modules/src/operators/publishLast.ts","../../../../../node_modules/src/scheduler/QueueAction.ts","../../../../../node_modules/src/scheduler/QueueScheduler.ts","../../../../../node_modules/src/scheduler/queue.ts","../../../../../node_modules/src/ReplaySubject.ts","../../../../../node_modules/src/operators/publishReplay.ts","../../../../../node_modules/src/operators/race.ts","../../../../../node_modules/src/operators/repeat.ts","../../../../../node_modules/src/operators/repeatWhen.ts","../../../../../node_modules/src/operators/retry.ts","../../../../../node_modules/src/operators/retryWhen.ts","../../../../../node_modules/src/operators/sample.ts","../../../../../node_modules/src/operators/sampleTime.ts","../../../../../node_modules/src/operators/sequenceEqual.ts","../../../../../node_modules/src/operators/share.ts","../../../../../node_modules/src/operators/shareReplay.ts","../../../../../node_modules/src/operators/single.ts","../../../../../node_modules/src/operators/skip.ts","../../../../../node_modules/src/operators/skipLast.ts","../../../../../node_modules/src/operators/skipUntil.ts","../../../../../node_modules/src/operators/skipWhile.ts","../../../../../node_modules/src/operators/startWith.ts","../../../../../node_modules/src/operators/switchMap.ts","../../../../../node_modules/src/operators/switchAll.ts","../../../../../node_modules/src/operators/switchMapTo.ts","../../../../../node_modules/src/operators/take.ts","../../../../../node_modules/src/operators/takeUntil.ts","../../../../../node_modules/src/operators/takeWhile.ts","../../../../../node_modules/src/operators/tap.ts","../../../../../node_modules/src/operators/throttle.ts","../../../../../node_modules/src/operators/throttleTime.ts","../../../../../node_modules/src/operators/timeInterval.ts","../../../../../node_modules/src/util/TimeoutError.ts","../../../../../node_modules/src/operators/timeout.ts","../../../../../node_modules/src/operators/timeoutWith.ts","../../../../../node_modules/src/operators/timestamp.ts","../../../../../node_modules/src/operators/toArray.ts","../../../../../node_modules/src/operators/window.ts","../../../../../node_modules/src/operators/windowCount.ts","../../../../../node_modules/src/operators/windowTime.ts","../../../../../node_modules/src/operators/windowToggle.ts","../../../../../node_modules/src/operators/windowWhen.ts","../../../../../node_modules/src/operators/withLatestFrom.ts","../../../../../node_modules/src/operators/zipAll.ts","../../../../../node_modules/src/util/AnimationFrame.ts","../../../../../node_modules/src/scheduler/AnimationFrameAction.ts","../../../../../node_modules/src/scheduler/AnimationFrameScheduler.ts","../../../../../node_modules/src/scheduler/animationFrame.ts","../../../../../node_modules/src/scheduler/VirtualTimeScheduler.ts","../../../../../node_modules/src/util/applyMixins.ts","../../../../../node_modules/src/util/assign.ts"],"sourcesContent":["declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);"],"names":["__window","window","__self","self","WorkerGlobalScope","_root","global","root_1","Error","isFunction_2","x","isArray_1","Array","isArray","length","tryCatchTarget","isObject_2","errorObject_1","e","tryCatcher","apply","this","arguments","errorObject","tryCatch_2","fn","UnsubscriptionError_2","_super","UnsubscriptionError","errors","call","err","map","i","toString","join","name","stack","message","__extends","flattenUnsubscriptionErrors","reduce","errs","concat","UnsubscriptionError_1","Subscription$$1","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","empty","Subscription","prototype","hasErrors","index","len","remove","isFunction_1","isFunction","tryCatch_1","tryCatch","sub","isObject_1","isObject","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","next","value","error","complete","Symbol","root","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","create","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","Object","bind","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","toSubscriber_2","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","noop_2","pipe_2","fns","_i","pipeFromArray","input","prev","noop_1","noop","Observable$$1","subscribe","_isScalar","_subscribe","Observable","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","ScalarObservable_2","ScalarObservable","scheduler","dispatch","state","done","schedule","Observable_1","EmptyObservable_2","EmptyObservable","arg","ArrayLikeObservable_2","ArrayLikeObservable","arrayLike","EmptyObservable_1","ScalarObservable_1","isScheduler_2","ArrayObservable_2","ArrayObservable","array","of","isScheduler_1","isScheduler","pop","count","ObjectUnsubscribedError_2","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","Subject$$1","hasError","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","slice","SubjectSubscription_1","asObservable","Subject_2","AsyncSubject","hasNext","hasCompleted","Subject_1","BoundCallbackObservable_2","BoundCallbackObservable","callbackFunc","selector","args","func","undefined","AsyncSubject_1","handler","handlerFn","innerArgs","result_1","result_2","dispatchError","dispatchNext","BoundNodeCallbackObservable_2","BoundNodeCallbackObservable","shift","_a","dispatchNext$1","dispatchError$1","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","refCount_1","ConnectableObservable_2","connectableProto","connectableObservableDescriptor","writable","isArrayLike_1","isPromise_2","then","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","key","$$iterator","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","subscribeToResult_2","outerSubscriber","result","InnerSubscriber_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","item","obs","TypeError","msg","OuterSubscriber","innerValue","innerIndex","innerSub","DeferObservable_2","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","subscribeToResult_1","subscribeToResult","OuterSubscriber_1","ErrorObservable_2","ErrorObservable","ForkJoinObservable_2","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","total","values","innerSubscription","_hasValue","FromEventObservable_2","FromEventObservable","sourceObj","eventName","options","target","setupSubscription","addEventListener","removeEventListener","source_1","on","off","source_2","addListener","removeListener","source_3","FromEventPatternObservable_2","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","PromiseObservable_2","PromiseObservable","promise","dispatchNext$2","dispatchError$2","IteratorObservable_2","IteratorObservable","obj","StringIterator","ArrayIterator","getIterator","return","str","idx","charAt","arr","o","isNaN","isFinite","valueAsNumber","Math","floor","abs","maxSafeInteger","toLength","pow","Notification_2","Notification","kind","hasValue","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","delay","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable_2","FromObservable","ish","ArrayObservable_1","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","selfSelector","GenerateObservable_2","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","generate_1","IfObservable_2","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","isNumeric_2","val","parseFloat","Action_2","Action","work","AsyncAction_2","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","Date","AsyncScheduler_2","AsyncScheduler","active","scheduled","action","Scheduler_1","async_1","AsyncScheduler_1","AsyncAction_1","IntervalObservable_2","IntervalObservable","period","async","isNumeric_1","isNumeric","NeverObservable_2","NeverObservable","onErrorResumeNext_2$1","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic_1","FromObservable_1","OnErrorResumeNextSubscriber","subscribeToNextSource","onErrorResumeNext_2","onErrorResumeNextStatic","dispatch$1","PairsObservable_2","PairsObservable","race_2","observables","RaceOperator","RaceSubscriber","RaceOperator_1","hasFirst","RangeObservable_2","RangeObservable","start","_count","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","Boolean","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","onmessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","data","task","channel","port1","port2","doc","html","documentElement","script","onreadystatechange","removeChild","appendChild","ImmediateDefinition_1","Immediate_1","AsapAction_2","AsapAction","Immediate","AsapScheduler_2","AsapScheduler","asap_1","AsapAction_1","SubscribeOnObservable_2","SubscribeOnObservable","delayTime","asap","isDate_2","TimerObservable_2","TimerObservable","dueTime","Number","isDate_1","isDate","initialDelay","UsingObservable_2","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","zip_2","zipStatic","project","ZipOperator","zipStatic_1","ZipSubscriber","ZipOperator_1","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","_tryProject","ZipSubscriber_1","nextResult","buffer","isComplete","audit_2","durationSelector","AuditOperator","AuditSubscriber","throttled","duration","clearThrottle","TimerObservable_1","auditTime_2","audit_1","audit","timer_1","timer","buffer_2","closingNotifier","BufferOperator","BufferSubscriber","bufferCount_2","bufferSize","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferTime_2","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferToggle_2","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferWhen_2","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","catchError_2","CatchOperator","caught","CatchSubscriber","err2","none","combineLatest_2","CombineLatestOperator","CombineLatestSubscriber","CombineLatestOperator_1","toRespond","unused","oldVal","combineAll_2","combineLatest_1","mergeMap_2","concurrent","MergeMapOperator","MergeMapSubscriber","MergeMapOperator_1","_tryNext","_innerSub","_notifyResultSelector","identity_2","mergeAll_2","mergeMap_1","mergeMap","identity_1","identity","concatAll_2","mergeAll_1","mergeAll","from_1","from","concatAll_1","concatAll","of_1","concat_4","concat_1","concatMap_2","concatMapTo_2","innerObservable","concatMap_1","concatMap","count_2","predicate","CountOperator","CountSubscriber","_tryPredicate","debounce_2","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","debounceTime_2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","dispatchNext$3","distinctUntilChanged_2","compare","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","distinctUntilKeyChanged_2","distinctUntilChanged_1","distinctUntilChanged","ArgumentOutOfRangeError_2","ArgumentOutOfRangeError","elementAt_2","defaultValue","ElementAtOperator","ArgumentOutOfRangeError_1","ElementAtSubscriber","every_2","thisArg","EveryOperator","EverySubscriber","everyValueMatch","exhaust_2","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaustMap_2","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","defaultIfEmpty_2","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","delay_2","delayFor","DelayOperator","DelaySubscriber","queue","time","delay_1","max","_schedule","scheduleNotification","DelayMessage","delayWhen_2","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","dematerialize_2","DeMaterializeOperator","DeMaterializeSubscriber","minimalSetImpl","MinimalSet","_values","has","defineProperty","get","clear","minimalSetImpl_1","distinct_2","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","expand_2","ExpandOperator","ExpandSubscriber","subscribeToProjection","filter_2","FilterOperator","FilterSubscriber","finalize_2","callback","FinallyOperator","FinallySubscriber","find_2","FindValueOperator","yieldIndex","FindValueSubscriber","FindValueOperator_1","findIndex_2","find_1","EmptyError_2","EmptyError","first_2","FirstOperator","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","MapPolyfill_2","MapPolyfill","size","_keys","set","delete","cb","MapPolyfill_1","FastMap_2","FastMap","hasOwnProperty","groupBy_2","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","ignoreElements_2","IgnoreElementsOperator","IgnoreElementsSubscriber","isEmpty_2","IsEmptyOperator","IsEmptySubscriber","last_2","LastOperator","LastSubscriber","map_2","MapOperator","MapSubscriber","MapOperator_1","mapTo_2","MapToOperator","MapToSubscriber","materialize_2","MaterializeOperator","MaterializeSubscriber","scan_2","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","takeLast_2","TakeLastOperator","TakeLastSubscriber","ring","reduce_2","scan_1","scan","takeLast_1","takeLast","defaultIfEmpty_1","defaultIfEmpty","acc","max_2","comparer","reduce_1","last","merge_4","merge_1","merge","mergeMapTo_2","MergeMapToOperator","MergeMapToSubscriber","mergeScan_2","MergeScanOperator","MergeScanSubscriber","min_2","min","multicast_2","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","pairwise_2","PairwiseOperator","PairwiseSubscriber","hasPrev","not_2","pred","notPred","partition_2","filter_1","filter","not_1","not","pluck_2","properties","map_1","props","currentProp","p","publish_2","multicast_1","multicast","BehaviorSubject$$1","_value","BehaviorSubject","getValue","publishBehavior_2","BehaviorSubject_1","publishLast_2","QueueAction_2","QueueAction","QueueScheduler_2","QueueScheduler","queue_1","QueueAction_1","ReplaySubject_2","ReplaySubject$$1","windowTime","_events","_bufferSize","_windowTime","ReplaySubject","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","publishReplay_2","selectorOrScheduler","ReplaySubject_1","race_3","race_1","race","repeat_2","RepeatOperator","RepeatSubscriber","repeatWhen_2","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","retry_2","RetryOperator","RetrySubscriber","retryWhen_2","RetryWhenOperator","RetryWhenSubscriber","sample_2","SampleOperator","sampleSubscriber","SampleSubscriber","sampleTime_2","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sequenceEqual_2","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","a","b","areEqual","nextB","shareSubjectFactory","share_2","shareReplay_2","single_2","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","skip_2","SkipOperator","SkipSubscriber","skipLast_2","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","oldValue","skipUntil_2","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipWhile_2","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","startWith_2","switchMap_2","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchAll_2","switchMap_1","switchMap","switchMapTo_2","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","take_2","TakeOperator","TakeSubscriber","takeUntil_2","TakeUntilOperator","TakeUntilSubscriber","takeWhile_2","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","tap_2","DoOperator","DoSubscriber","safeSubscriber","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttleTime_2","throttle_1","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext$4","timeInterval_2","TimeIntervalOperator","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","TimeoutError_2","TimeoutError","timeout_2","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeoutWith_2","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timestamp_2","Timestamp","timestamp","toArrayReducer","toArray_2","window_2","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","windowCount_2","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","window_1","windowTime_2","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","timeSpanState","windowToggle_2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowWhen_2","unsubscribeClosingNotification","closingNotification","withLatestFrom_2","WithLatestFromOperator","WithLatestFromSubscriber","found","zipAll_2","zip_1","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","RequestAnimationFrameDefinition_1","AnimationFrame_1","AnimationFrameAction_2","AnimationFrameAction","AnimationFrame","AnimationFrameScheduler_2","AnimationFrameScheduler","animationFrame_1","AnimationFrameAction_1","VirtualTimeScheduler_2","VirtualTimeScheduler","maxFrames","VirtualAction","frame","frameTimeFactor","sort","sortActions","applyMixins_2","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","assignImpl","k","assign_1","assign"],"mappings":"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"}
